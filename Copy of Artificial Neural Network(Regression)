{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Artificial Neural Network(Regression)","provenance":[{"file_id":"1eje9zILprgVmohMN7cKykI3fn4FBRPnF","timestamp":1594070395371}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"3cbb7fRy-eyr","colab_type":"text"},"source":["# Artificial Neural Network"]},{"cell_type":"markdown","metadata":{"id":"8sNDnxE2-pwE","colab_type":"text"},"source":["### Importing the libraries"]},{"cell_type":"code","metadata":{"id":"2hLd_wOZ9pXC","colab_type":"code","colab":{}},"source":["import numpy as np   \n","import pandas as pd  \n","import matplotlib.pyplot as plt  \n","import tensorflow as tf\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ntw7pVNJK4Uf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1594073290249,"user_tz":300,"elapsed":1282,"user":{"displayName":"Saxton Randle-Sims","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDSDotnX0MxQTjCDKQe4Tsfs2iH45uRAovpepY7w=s64","userId":"02874804793914908133"}},"outputId":"1bcc1948-ec56-4a59-be32-eae013b0d2aa"},"source":["tf.__version__"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic":{"type":"string"},"text/plain":["'2.2.0'"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"AG3FQEch-yuA","colab_type":"text"},"source":["## Part 1 - Data Preprocessing"]},{"cell_type":"code","metadata":{"id":"d8BZW5kt99rk","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-4zq8Mza_D9O","colab_type":"text"},"source":["### Importing the dataset"]},{"cell_type":"markdown","metadata":{"id":"1A36QvWQBPGm","colab_type":"text"},"source":["\":\" means all the range. rows come first then columns in this array "]},{"cell_type":"code","metadata":{"id":"mU3kSwCP_sEq","colab_type":"code","colab":{}},"source":["dataset = pd.read_excel('Folds5x2_pp.xlsx')  \n","X = dataset.iloc[:, :-1].values\n","y = dataset.iloc[:, -1].values\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IODkafbSDEdB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":139},"executionInfo":{"status":"ok","timestamp":1594073292449,"user_tz":300,"elapsed":3293,"user":{"displayName":"Saxton Randle-Sims","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDSDotnX0MxQTjCDKQe4Tsfs2iH45uRAovpepY7w=s64","userId":"02874804793914908133"}},"outputId":"fa0ce32e-4565-4942-e60a-cb94c7343bcc"},"source":["print(X)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[  14.96   41.76 1024.07   73.17]\n"," [  25.18   62.96 1020.04   59.08]\n"," [   5.11   39.4  1012.16   92.14]\n"," ...\n"," [  31.32   74.33 1012.92   36.48]\n"," [  24.48   69.45 1013.86   62.39]\n"," [  21.6    62.52 1017.23   67.87]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"48xzgMUuEjOG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1594073292451,"user_tz":300,"elapsed":3237,"user":{"displayName":"Saxton Randle-Sims","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDSDotnX0MxQTjCDKQe4Tsfs2iH45uRAovpepY7w=s64","userId":"02874804793914908133"}},"outputId":"3fbbdd0c-1bd6-408d-cf6e-7f7b01e623f5"},"source":["print (y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[463.26 444.37 488.56 ... 429.57 435.74 453.28]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VC6omXel_Up0","colab_type":"text"},"source":["### Splitting the dataset into the Training set and Test set"]},{"cell_type":"markdown","metadata":{"id":"CkMExvDpB-aA","colab_type":"text"},"source":["In this section you want to train your neural network on the training set first and then evaluate the performance of it on the test set. \n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"3btpKIh5B1_J","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_mSLlAT9_eyI","colab_type":"text"},"source":["## Part 2 - Building the ANN"]},{"cell_type":"markdown","metadata":{"id":"CsBULd_f_wLY","colab_type":"text"},"source":["### Initializing the ANN"]},{"cell_type":"code","metadata":{"id":"OGssx8vTHdIk","colab_type":"code","colab":{}},"source":["ann = tf.keras.models.Sequential()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iitAFJS_ABUn","colab_type":"text"},"source":["### Adding the input layer and the first hidden layer"]},{"cell_type":"code","metadata":{"id":"vH3neOiyHpzZ","colab_type":"code","colab":{}},"source":["ann.add(tf.keras.layers.Dense(units=6, activation='relu'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-lb4kK_wAKbs","colab_type":"text"},"source":["### Adding the second hidden layer"]},{"cell_type":"code","metadata":{"id":"vvy3S70vHuYT","colab_type":"code","colab":{}},"source":["ann.add(tf.keras.layers.Dense(units=6, activation='relu'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jwMOmKb3AdBY","colab_type":"text"},"source":["### Adding the output layer"]},{"cell_type":"markdown","metadata":{"id":"EuHDZiJDIO5b","colab_type":"text"},"source":["Best practices is to have the 'sigmoid' if it's a classification model but if regressions activation should be \"none\" "]},{"cell_type":"code","metadata":{"id":"Vp8_OS2_H8Q8","colab_type":"code","colab":{}},"source":["ann.add(tf.keras.layers.Dense(units=1))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fq7e4fF6A1yy","colab_type":"text"},"source":["## Part 3 - Training the ANN"]},{"cell_type":"markdown","metadata":{"id":"qDeylAs2An25","colab_type":"text"},"source":["### Compiling the ANN"]},{"cell_type":"code","metadata":{"id":"mx0WG8N7ItHe","colab_type":"code","colab":{}},"source":["ann.compile(optimizer = 'adam' , loss = 'mean_squared_error')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YjVuiybYOo7r","colab_type":"text"},"source":["### Training the ANN model on the Training set"]},{"cell_type":"code","metadata":{"id":"Mju_S7WeIvfM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1594073363864,"user_tz":300,"elapsed":30691,"user":{"displayName":"Saxton Randle-Sims","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDSDotnX0MxQTjCDKQe4Tsfs2iH45uRAovpepY7w=s64","userId":"02874804793914908133"}},"outputId":"212f158a-332e-4e96-d36e-961ee093bdb6"},"source":["ann.fit(X_train, y_train, batch_size = 32, epochs = 100)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","240/240 [==============================] - 0s 1ms/step - loss: 206519.2188\n","Epoch 2/100\n","240/240 [==============================] - 0s 1ms/step - loss: 64808.0273\n","Epoch 3/100\n","240/240 [==============================] - 0s 1ms/step - loss: 415.3991\n","Epoch 4/100\n","240/240 [==============================] - 0s 2ms/step - loss: 407.9177\n","Epoch 5/100\n","240/240 [==============================] - 0s 2ms/step - loss: 397.5967\n","Epoch 6/100\n","240/240 [==============================] - 0s 2ms/step - loss: 386.4404\n","Epoch 7/100\n","240/240 [==============================] - 0s 2ms/step - loss: 373.5989\n","Epoch 8/100\n","240/240 [==============================] - 0s 2ms/step - loss: 359.7309\n","Epoch 9/100\n","240/240 [==============================] - 0s 2ms/step - loss: 344.8554\n","Epoch 10/100\n","240/240 [==============================] - 0s 2ms/step - loss: 328.2850\n","Epoch 11/100\n","240/240 [==============================] - 0s 2ms/step - loss: 311.8620\n","Epoch 12/100\n","240/240 [==============================] - 0s 2ms/step - loss: 294.4395\n","Epoch 13/100\n","240/240 [==============================] - 0s 2ms/step - loss: 277.0214\n","Epoch 14/100\n","240/240 [==============================] - 1s 2ms/step - loss: 258.6662\n","Epoch 15/100\n","240/240 [==============================] - 1s 2ms/step - loss: 240.0300\n","Epoch 16/100\n","240/240 [==============================] - 0s 2ms/step - loss: 222.4411\n","Epoch 17/100\n","240/240 [==============================] - 0s 1ms/step - loss: 204.7379\n","Epoch 18/100\n","240/240 [==============================] - 0s 1ms/step - loss: 186.7388\n","Epoch 19/100\n","240/240 [==============================] - 0s 1ms/step - loss: 170.0535\n","Epoch 20/100\n","240/240 [==============================] - 0s 1ms/step - loss: 153.7947\n","Epoch 21/100\n","240/240 [==============================] - 0s 1ms/step - loss: 138.0981\n","Epoch 22/100\n","240/240 [==============================] - 0s 1ms/step - loss: 124.5926\n","Epoch 23/100\n","240/240 [==============================] - 0s 1ms/step - loss: 110.5912\n","Epoch 24/100\n","240/240 [==============================] - 0s 1ms/step - loss: 97.9975\n","Epoch 25/100\n","240/240 [==============================] - 0s 1ms/step - loss: 87.0184\n","Epoch 26/100\n","240/240 [==============================] - 0s 1ms/step - loss: 77.0372\n","Epoch 27/100\n","240/240 [==============================] - 0s 1ms/step - loss: 68.3216\n","Epoch 28/100\n","240/240 [==============================] - 0s 1ms/step - loss: 60.9228\n","Epoch 29/100\n","240/240 [==============================] - 0s 1ms/step - loss: 55.2133\n","Epoch 30/100\n","240/240 [==============================] - 0s 1ms/step - loss: 49.9081\n","Epoch 31/100\n","240/240 [==============================] - 0s 1ms/step - loss: 45.6534\n","Epoch 32/100\n","240/240 [==============================] - 0s 1ms/step - loss: 42.5878\n","Epoch 33/100\n","240/240 [==============================] - 0s 1ms/step - loss: 39.9387\n","Epoch 34/100\n","240/240 [==============================] - 0s 1ms/step - loss: 37.8183\n","Epoch 35/100\n","240/240 [==============================] - 0s 1ms/step - loss: 36.3126\n","Epoch 36/100\n","240/240 [==============================] - 0s 1ms/step - loss: 35.4140\n","Epoch 37/100\n","240/240 [==============================] - 0s 1ms/step - loss: 34.0968\n","Epoch 38/100\n","240/240 [==============================] - 0s 1ms/step - loss: 33.5065\n","Epoch 39/100\n","240/240 [==============================] - 0s 1ms/step - loss: 32.9390\n","Epoch 40/100\n","240/240 [==============================] - 0s 1ms/step - loss: 32.1610\n","Epoch 41/100\n","240/240 [==============================] - 0s 1ms/step - loss: 31.3492\n","Epoch 42/100\n","240/240 [==============================] - 0s 1ms/step - loss: 30.9410\n","Epoch 43/100\n","240/240 [==============================] - 0s 1ms/step - loss: 30.9038\n","Epoch 44/100\n","240/240 [==============================] - 0s 1ms/step - loss: 29.8908\n","Epoch 45/100\n","240/240 [==============================] - 0s 1ms/step - loss: 30.1741\n","Epoch 46/100\n","240/240 [==============================] - 0s 1ms/step - loss: 29.1237\n","Epoch 47/100\n","240/240 [==============================] - 0s 1ms/step - loss: 29.0359\n","Epoch 48/100\n","240/240 [==============================] - 0s 1ms/step - loss: 28.4806\n","Epoch 49/100\n","240/240 [==============================] - 0s 1ms/step - loss: 28.8977\n","Epoch 50/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.9815\n","Epoch 51/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.7000\n","Epoch 52/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.8632\n","Epoch 53/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.7333\n","Epoch 54/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.3829\n","Epoch 55/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.3880\n","Epoch 56/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.3862\n","Epoch 57/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.6101\n","Epoch 58/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.9788\n","Epoch 59/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.9370\n","Epoch 60/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.8126\n","Epoch 61/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.9701\n","Epoch 62/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.7898\n","Epoch 63/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.7553\n","Epoch 64/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.9133\n","Epoch 65/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.9192\n","Epoch 66/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.6304\n","Epoch 67/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4741\n","Epoch 68/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.3818\n","Epoch 69/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4973\n","Epoch 70/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.2894\n","Epoch 71/100\n","240/240 [==============================] - 0s 1ms/step - loss: 27.0236\n","Epoch 72/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.6750\n","Epoch 73/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5322\n","Epoch 74/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4583\n","Epoch 75/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.9267\n","Epoch 76/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.7066\n","Epoch 77/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4019\n","Epoch 78/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5423\n","Epoch 79/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.6071\n","Epoch 80/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.3241\n","Epoch 81/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5709\n","Epoch 82/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.2311\n","Epoch 83/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.7406\n","Epoch 84/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4731\n","Epoch 85/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.3198\n","Epoch 86/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4264\n","Epoch 87/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.2784\n","Epoch 88/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5919\n","Epoch 89/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.1469\n","Epoch 90/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.7292\n","Epoch 91/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5526\n","Epoch 92/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.2007\n","Epoch 93/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4660\n","Epoch 94/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4850\n","Epoch 95/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.4080\n","Epoch 96/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.2592\n","Epoch 97/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5824\n","Epoch 98/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.6889\n","Epoch 99/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.3659\n","Epoch 100/100\n","240/240 [==============================] - 0s 1ms/step - loss: 26.5562\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fde9b9a9240>"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"fKPkbSL3K2aj","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0H0zKKNEBLD5","colab_type":"text"},"source":["### Predicting the results of the Test set"]},{"cell_type":"markdown","metadata":{"id":"1KgaVbdxNO79","colab_type":"text"},"source":["\"reshape allows you to print the results vertically for you\" the 1 allows how many columns "]},{"cell_type":"code","metadata":{"id":"5Fl4H_ihLh_Y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":139},"executionInfo":{"status":"ok","timestamp":1594073929845,"user_tz":300,"elapsed":755,"user":{"displayName":"Saxton Randle-Sims","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDSDotnX0MxQTjCDKQe4Tsfs2iH45uRAovpepY7w=s64","userId":"02874804793914908133"}},"outputId":"2aaba62f-27e4-4a24-8fb1-af731dcba27f"},"source":["y_pred = ann.predict(X_test)\n","np.set_printoptions(precision=2) \n","print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[430.51 431.23]\n"," [461.47 460.01]\n"," [464.95 461.14]\n"," ...\n"," [472.15 473.26]\n"," [439.13 438.  ]\n"," [458.24 463.28]]\n"],"name":"stdout"}]}]}